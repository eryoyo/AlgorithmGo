//一条包含字母 A-Z 的消息通过以下映射进行了 编码 ： 
//
// 
//'A' -> 1
//'B' -> 2
//...
//'Z' -> 26
// 
//
// 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为： 
//
// 
// "AAJF" ，将消息分组为 (1 1 10 6) 
// "KJF" ，将消息分组为 (11 10 6) 
// 
//
// 注意，消息不能分组为 (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。 
//
// 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。 
//
// 题目数据保证答案肯定是一个 32 位 的整数。 
//
// 
//
// 示例 1： 
//
// 
//输入：s = "12"
//输出：2
//解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
// 
//
// 示例 2： 
//
// 
//输入：s = "226"
//输出：3
//解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
// 
//
// 示例 3： 
//
// 
//输入：s = "0"
//输出：0
//解释：没有字符映射到以 0 开头的数字。
//含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
//由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
// 
//
// 示例 4： 
//
// 
//输入：s = "06"
//输出：0
//解释："06" 不能映射到 "F" ，因为字符串含有前导 0（"6" 和 "06" 在映射中并不等价）。 
//
// 
//
// 提示： 
//
// 
// 1 <= s.length <= 100 
// s 只包含数字，并且可能包含前导零。 
// 
// Related Topics 字符串 动态规划 
// 👍 901 👎 0

/*
 * 题解
这是一道很经典的动态规划题，难度不大但是十分考验耐心。这是因为只有 1-26 可以表示
字母，因此对于一些特殊情况，比如数字 0 或者当相邻两数字大于 26 时，需要有不同的状态转
移方程，详见如下代码。
 */

#include <string>
#include<vector>

using namespace std;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
public:
    int numDecodings(string s) {
        int n = s.length();
        if(n == 0){
            return 0;
        }
        int prev = s[0] - '0';
        if(!prev){
            return 0;
        }
        if(n == 1){
            return 1;
        }
        vector<int> dp(n + 1, 1);
        for(int i = 2; i <= n; ++i){
            int cur = s[i - 1] - '0';
            if((prev == 0 || prev > 2) && cur == 0){
                return 0;
            }
            //当前位置有用
            if((prev < 2 && prev > 0) || (prev == 2 && cur < 7)){
                //当当前位置不为0，则当前位置可以参与形成新的一位解码
                //当前位置一位形成编码dp[i - 1]
                //当前位置及其之前一位形成一位解码dp[i - 2]
                if(cur){
                    dp[i] = dp[i - 2] + dp[i - 1];
                } else{
                    dp[i] = dp[i - 2];
                }
            }else{
                dp[i] = dp[i - 1];
            }
            prev = cur;
        }
        return dp[n];
    }
};
//leetcode submit region end(Prohibit modification and deletion)
